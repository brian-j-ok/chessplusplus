name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  GODOT_VERSION: '4.4.1'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install tools
      run: |
        dotnet tool install -g csharpier
        dotnet tool install -g dotnet-format

    - name: Restore dependencies
      run: dotnet restore

    - name: Check formatting with CSharpier
      run: dotnet csharpier --check .

    - name: Check code style with dotnet format
      run: |
        dotnet format style --verify-no-changes --verbosity diagnostic
        dotnet format analyzers --verify-no-changes --verbosity diagnostic

    - name: Run analyzers
      run: dotnet build --no-restore -warnaserror

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Godot
      uses: chickensoft-games/setup-godot@v2
      with:
        version: ${{ env.GODOT_VERSION }}
        use-dotnet: true

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: |
        if [ -f "*.Tests.csproj" ] || [ -f "tests/*.csproj" ]; then
          dotnet test --no-build --configuration Release --verbosity normal
        else
          echo "No test projects found, skipping tests"
        fi

    - name: Check for security vulnerabilities
      run: dotnet list package --vulnerable --include-transitive

  build-multi-platform:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: lint-and-format
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Godot
      uses: chickensoft-games/setup-godot@v2
      with:
        version: ${{ env.GODOT_VERSION }}
        use-dotnet: true

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      shell: bash
      run: |
        if [ -f "*.Tests.csproj" ] || [ -f "tests/*.csproj" ]; then
          dotnet test --no-build --configuration Release --verbosity normal
        else
          echo "No test projects found, skipping tests"
        fi